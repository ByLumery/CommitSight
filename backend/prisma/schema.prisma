// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  repositories Repository[]
  favorites    FavoriteRepository[]

  @@map("users")
}

model Repository {
  id          String   @id @default(cuid())
  owner       String
  name        String
  fullName    String   @unique
  description String?
  url         String
  language    String?
  stars       Int      @default(0)
  forks       Int      @default(0)
  watchers    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  commits        Commit[]
  contributors   Contributor[]
  languages      Language[]
  issues         Issue[]
  pullRequests   PullRequest[]
  favorites      FavoriteRepository[]
  analyses       Analysis[]

  @@map("repositories")
}

model Commit {
  id          String   @id @default(cuid())
  sha         String   @unique
  message     String
  author      String
  authorEmail String
  date        DateTime
  url         String
  createdAt   DateTime @default(now())

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("commits")
}

model Contributor {
  id        String   @id @default(cuid())
  username  String
  avatarUrl String?
  commits   Int      @default(0)
  additions Int      @default(0)
  deletions Int      @default(0)
  createdAt DateTime @default(now())

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("contributors")
}

model Language {
  id       String  @id @default(cuid())
  name     String
  bytes    Int
  percentage Float

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("languages")
}

model Issue {
  id        String   @id @default(cuid())
  number    Int
  title     String
  body      String?
  state     String
  labels    String[]
  createdAt DateTime
  updatedAt DateTime
  closedAt  DateTime?

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("issues")
}

model PullRequest {
  id        String   @id @default(cuid())
  number    Int
  title     String
  body      String?
  state     String
  merged    Boolean  @default(false)
  createdAt DateTime
  updatedAt DateTime
  closedAt  DateTime?

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("pull_requests")
}

model FavoriteRepository {
  id String @id @default(cuid())

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@map("favorite_repositories")
}

model Analysis {
  id          String   @id @default(cuid())
  type        String
  data        Json
  createdAt   DateTime @default(now())

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("analyses")
}
